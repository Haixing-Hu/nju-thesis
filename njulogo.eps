%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: njulogo.pdf
%%Creator: Adobe Acrobat 19.8.0
%%For: caoze
%%CreationDate: 2018/12/22, 23:36:22
%%BoundingBox: 0 0 269 337
%%HiResBoundingBox: 0 0 268.2240 336.2461
%%CropBox: 0 0 268.2240 336.2461
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 44606 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 91.163280, 2018/06/22-11:31:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:MetadataDate="2013-02-05T21:25:46+08:00"
   xmp:ModifyDate="2013-02-05T21:25:46+08:00"
   xmp:CreateDate="2013-02-05T21:25:46+09:00"
   xmp:CreatorTool="Adobe Illustrator CS6 (Windows)"
   xmpMM:InstanceID="uuid:26f5aec4-ba32-44d2-9c9b-ae865ff4815a"
   xmpMM:DocumentID="xmp.did:18B91D70976FE2118F95D2EDE74F84F4"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 10.01">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">njulogo</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="204"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADMAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A5R+W3/OQv5ieRUjs7a6G&#xA;p6LHsul33KSNF8IXBEkXsAeP+TgZPpjyN/zld+WXmIRwarK/lvUHoDHe/FbFj/LcoOIA8ZAmKKew&#xA;2V/Y39rHd2NxFd2sorFcQOskbDxV1JBwoV8VdirsVdirsVdirsVWySRxRvLK4SNAWd2ICqoFSST0&#xA;AxV5X56/5yX/ACt8qJLFFqA1zU0FFstMImXlTbncV9FRXZqMWH8uC00+aPPP/OUX5n+ZNRjl028P&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:17B91D70976FE2118F95D2EDE74F84F4"
    stRef:documentID="xmp.did:17B91D70976FE2118F95D2EDE74F84F4"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:15B91D70976FE2118F95D2EDE74F84F4"
      stEvt:when="2013-02-05T21:24:58+08:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:18B91D70976FE2118F95D2EDE74F84F4"
      stEvt:when="2013-02-05T21:25:39+08:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="94.623337"
    stDim:h="118.620150"
    stDim:unit="Millimeters"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="默认色板组"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="白色"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="黑色"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK 红"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK 黄"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK 绿"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK 青"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK 蓝"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK 洋红"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=15 M=100 Y=90 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="14.999998"
         xmpG:magenta="100.000000"
         xmpG:yellow="90.000004"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=0 M=90 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="90.000004"
         xmpG:yellow="84.999996"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=80 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="80.000001"
         xmpG:yellow="94.999999"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=50 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=35 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="35.000002"
         xmpG:yellow="84.999996"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=5 M=0 Y=90 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="5.000001"
         xmpG:magenta="0.000000"
         xmpG:yellow="90.000004"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=20 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="19.999999"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="84.999996"
         xmpG:magenta="10.000002"
         xmpG:yellow="100.000000"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=90 M=30 Y=95 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="90.000004"
         xmpG:magenta="30.000001"
         xmpG:yellow="94.999999"
         xmpG:black="30.000001"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=75 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="75.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=80 M=10 Y=45 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="80.000001"
         xmpG:magenta="10.000002"
         xmpG:yellow="44.999999"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=70 M=15 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="69.999999"
         xmpG:magenta="14.999998"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=50 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="84.999996"
         xmpG:magenta="50.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=95 Y=5 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="94.999999"
         xmpG:yellow="5.000001"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=100 Y=25 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="25.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=35 M=100 Y=35 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000002"
         xmpG:magenta="100.000000"
         xmpG:yellow="35.000002"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=10 M=100 Y=50 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="10.000002"
         xmpG:magenta="100.000000"
         xmpG:yellow="50.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=95 Y=20 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="94.999999"
         xmpG:yellow="19.999999"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=25 M=25 Y=40 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="25.000000"
         xmpG:yellow="39.999998"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=45 Y=50 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999998"
         xmpG:magenta="44.999999"
         xmpG:yellow="50.000000"
         xmpG:black="5.000001"/>
        <rdf:li
         xmpG:swatchName="C=50 M=50 Y=60 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="60.000002"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=55 M=60 Y=65 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="55.000001"
         xmpG:magenta="60.000002"
         xmpG:yellow="64.999998"
         xmpG:black="39.999998"/>
        <rdf:li
         xmpG:swatchName="C=25 M=40 Y=65 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="39.999998"
         xmpG:yellow="64.999998"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=30 M=50 Y=75 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="30.000001"
         xmpG:magenta="50.000000"
         xmpG:yellow="75.000000"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=35 M=60 Y=80 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000002"
         xmpG:magenta="60.000002"
         xmpG:yellow="80.000001"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=65 Y=90 K=35"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999998"
         xmpG:magenta="64.999998"
         xmpG:yellow="90.000004"
         xmpG:black="35.000002"/>
        <rdf:li
         xmpG:swatchName="C=40 M=70 Y=100 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999998"
         xmpG:magenta="69.999999"
         xmpG:yellow="100.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=70 Y=80 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="69.999999"
         xmpG:yellow="80.000001"
         xmpG:black="69.999999"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="灰色"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=90"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="89.999402"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=80"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="79.998797"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="69.999701"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=60"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="59.999102"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="39.999402"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="29.998803"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=20"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="19.999701"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="9.999102"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="4.998803"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="明亮"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=100 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=75 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="75.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=10 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="10.000002"
         xmpG:yellow="94.999999"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="84.999996"
         xmpG:magenta="10.000002"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="90.000004"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=60 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="60.000002"
         xmpG:magenta="90.000004"
         xmpG:yellow="0.003099"
         xmpG:black="0.003099"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -336.246 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 336.246 li
268.224 336.246 li
268.224 0 li
cp
clp
gsave
0 0 mo
268.224 0 li
268.224 336.246 li
0 336.246 li
cp
clp
127.326 14.0458 mo
103.919 24.3658 67.0457 27.3758 37.1497 21.3368 cv
27.7847 19.4458 19.2727 16.9178 11.8777 13.4888 cv
10.8917 13.0098 9.8007 12.2088 8.5757 12.3168 cv
8.2317 48.6818 9.1617 86.4018 9.1617 121.437 cv
9.1617 139.661 8.2847 158.281 9.0017 175.626 cv
9.8007 192.891 11.7457 209.276 16.4757 223.374 cv
21.1357 237.207 27.3607 249.099 35.1277 259.928 cv
46.7257 276.152 60.7707 289.615 78.5407 299.243 cv
84.5287 302.436 90.8287 305.282 97.2147 308.234 cv
109.665 314.062 122.114 320.15 134.486 326.192 cv
146.822 320.047 159.355 314.221 171.646 308.234 cv
177.978 305.177 184.333 302.568 190.267 299.35 cv
202.077 293.072 212.134 284.641 221.074 275.169 cv
234.427 261.098 245.331 243.594 251.935 223.242 cv
261.189 194.646 259.273 158.439 259.273 121.834 cv
259.273 84.9668 259.382 48.6538 259.646 12.3168 cv
258.529 12.3168 257.437 13.0098 256.374 13.4888 cv
248.685 16.8668 240.39 19.6868 231.155 21.4938 cv
209.421 25.7238 182.769 25.0858 162.31 20.6168 cv
151.775 18.3278 142.441 14.7898 134.191 10.5908 cv
132.49 11.9428 129.965 12.8748 127.326 14.0458 cv
.116699 -.000183105 mo
17.1397 9.92383 39.5447 16.9178 66.3807 17.1588 cv
93.8877 17.4778 117.219 12.1048 134.06 1.43784 cv
151.03 12.0498 174.624 17.5848 201.867 17.1588 cv
228.202 16.8128 251.398 9.92383 268.158 .132813 cv
268.476 39.6618 267.546 77.3578 267.546 116.701 cv
267.546 155.78 269.65 196.347 259.646 226.225 cv
254.777 240.881 247.437 253.171 239.161 264.69 cv
231.021 276.1 220.913 286.104 210.062 294.349 cv
198.779 302.942 185.743 309.033 172.499 315.708 cv
161.14 321.429 149.726 327.335 138.661 333.348 cv
137.118 334.199 135.305 334.758 134.191 336.246 cv
128.228 332.231 121.741 329.009 115.303 325.633 cv
108.815 322.311 102.268 318.903 95.7777 315.575 cv
89.0747 312.147 82.3687 309.22 76.0127 305.84 cv
69.6537 302.489 63.8807 298.58 58.2137 294.191 cv
35.9467 277.191 18.7647 255.164 8.5757 225.848 cv
3.3647 210.714 1.8727 193.398 .969696 174.64 cv
.116699 156.15 .570702 136.467 .570702 117.288 cv
.570702 78.2108 .0157013 39.7958 .0157013 .425812 cv
-.013298 .213837 -.013298 -.000183105 .116699 -.000183105 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.93 .88 .89 .8 cmyk
ef
136.106 32.2431 mo
135.628 31.0201 135.15 28.3051 133.766 28.5451 cv
131.346 33.5461 129.722 39.3451 127.593 44.7451 cv
128.818 44.8011 131.132 44.6921 132.327 44.7451 cv
131.423 39.9301 136.904 39.6391 135.785 44.7451 cv
140.681 44.7451 li
139.294 41.0471 137.544 36.2611 136.106 32.2431 cv
137.089 25.5131 mo
148.606 26.7631 157.257 32.7761 162.468 41.3131 cv
163.161 42.4301 164.306 44.2391 164.198 45.1181 cv
164.038 46.0461 163.345 46.7921 162.468 46.7391 cv
161.323 46.6861 161.005 45.1181 160.151 43.7081 cv
155.767 36.0181 148.663 30.7241 138.499 28.9411 cv
138.98 31.2841 140.042 33.5461 140.948 35.9691 cv
141.8 38.3611 142.704 40.8341 143.527 43.1741 cv
143.929 43.6001 143.476 44.1581 143.527 44.7451 cv
145.362 44.6121 147.413 44.6921 147.118 46.7391 cv
146.72 49.3751 138.849 47.3791 135.921 48.0421 cv
135.601 50.0641 135.869 52.7511 135.785 55.0141 cv
137.386 55.9701 144.989 54.2141 146.532 55.3311 cv
146.985 55.6231 147.173 56.5561 147.118 57.0351 cv
146.693 59.9091 138.98 57.5681 135.921 58.3101 cv
135.47 60.7061 136.579 64.0571 134.191 64.2181 cv
131.903 64.3471 132.543 61.1841 132.49 58.4451 cv
129.612 57.4081 121.741 59.9631 121.153 57.1951 cv
120.357 53.2581 129.591 56.1031 132.327 55.0141 cv
132.598 53.0711 132.598 50.1181 132.327 48.1501 cv
129.775 47.1901 121.687 49.4801 121.153 46.8731 cv
120.731 44.8481 122.752 44.5331 124.612 44.7451 cv
125.015 44.3721 124.402 43.8941 124.612 43.3101 cv
126.474 38.6791 127.994 33.7071 129.935 29.1031 cv
117.642 30.7781 109.877 38.2281 105.991 48.7081 cv
107.324 48.6541 109.345 47.8831 112.001 47.4311 cv
114.823 46.9531 120.546 45.6481 118.87 49.5881 cv
116.556 50.3311 113.92 50.2501 111.526 50.7581 cv
109.185 51.2081 107.057 52.0321 105.089 52.7511 cv
104.716 53.4721 104.609 54.4801 104.502 55.4901 cv
106.579 55.1741 108.758 54.2691 111.526 53.7631 cv
113.517 53.4161 119.457 51.9841 118.87 55.1971 cv
118.602 56.6081 116.901 56.4251 115.569 56.5011 cv
111.736 56.7431 106.924 57.9921 104.502 59.3491 cv
104.396 59.8551 104.502 61.0001 104.66 61.6371 cv
107.003 61.0241 108.705 60.5191 111.686 60.0401 cv
113.546 59.8021 118.016 58.5521 118.442 60.6251 cv
119.055 63.6061 113.814 62.7541 111.289 63.2051 cv
108.544 63.7141 106.897 64.4841 105.25 65.0401 cv
105.86 66.4531 105.885 68.2611 104.502 68.4981 cv
101.63 69.1381 101.31 62.3821 101.205 59.6421 cv
101.097 55.4391 101.681 51.7151 102.535 48.8671 cv
106.316 35.8861 116.421 27.5851 131.21 25.3791 cv
132.276 23.8081 132.276 20.6701 134.353 20.8811 cv
136.189 21.0691 136.002 24.1291 137.089 25.5131 cv
ef
30.8188 85.4423 mo
30.8188 85.8443 li
32.0928 85.7103 32.3888 87.2553 33.4258 86.8813 cv
33.1048 85.8983 31.8808 85.1773 30.8188 85.4423 cv
57.4958 77.1213 mo
56.9388 77.3813 56.3538 77.5703 56.0868 78.1303 cv
55.8748 79.0883 56.4588 80.8183 55.6348 81.1353 cv
54.2538 80.1503 53.2168 80.8953 52.3118 81.8803 cv
51.6168 81.7473 51.4078 81.0823 50.3398 81.2963 cv
50.2358 81.7743 49.8138 83.5313 50.6088 83.5843 cv
51.4078 83.4243 50.1828 82.0933 51.1948 82.0933 cv
51.4608 82.7873 51.9378 83.2133 52.3118 83.7423 cv
52.2568 84.8083 51.8828 86.9623 52.4698 87.7603 cv
54.1738 87.2553 52.5478 83.4243 54.6508 83.2633 cv
55.3408 83.6653 55.1538 84.9663 55.2138 86.0013 cv
55.8208 86.2703 56.5658 87.2023 57.6318 87.3083 cv
58.7998 87.4393 60.8988 87.0423 61.3568 86.1653 cv
60.6078 85.5783 59.3858 85.5503 58.7998 84.8613 cv
58.5638 84.7013 58.6418 84.1143 58.6418 83.7423 cv
57.2338 82.7873 56.5658 80.3923 57.2068 78.2643 cv
57.4188 77.5703 58.8528 76.5883 57.6318 75.8143 cv
57.4188 76.0543 57.5228 76.6663 57.4958 77.1213 cv
45.3158 75.3903 mo
45.4228 75.9233 46.5098 75.6563 46.8838 75.5493 cv
46.8838 75.3643 46.9368 75.2303 47.0468 75.1233 cv
46.8338 74.7803 46.4028 74.5673 46.0068 74.4033 cv
46.1658 75.1233 45.2628 74.7803 45.3158 75.3903 cv
26.9308 75.0163 mo
27.7308 74.3523 27.9978 72.7823 27.5178 71.6673 cv
26.0798 71.6673 25.8138 74.4323 26.9308 75.0163 cv
33.8468 72.3853 mo
33.2128 72.4383 33.4738 71.6093 32.8358 71.6673 cv
31.9858 71.6913 31.9858 72.5683 31.2398 72.6773 cv
30.9488 72.5683 30.7618 72.3583 30.2308 72.3853 cv
29.9088 72.6773 29.4318 72.8353 29.5398 73.5003 cv
30.2818 73.1813 30.4988 73.3153 31.1088 73.6623 cv
31.3468 73.3933 31.2668 72.8353 31.8288 72.8353 cv
31.7198 74.9633 30.4158 77.1713 27.9698 77.3813 cv
27.7308 78.5283 26.9848 79.0883 26.2428 79.6993 cv
25.6558 82.3313 26.4008 84.7553 28.9588 84.7553 cv
29.1408 84.2753 29.0848 83.5313 29.1128 82.8403 cv
28.3708 82.1463 27.6748 81.4283 27.9698 79.6993 cv
28.3708 79.3523 28.8728 79.0883 29.6738 79.1153 cv
30.7618 78.1033 31.7198 76.8783 32.4138 75.3903 cv
31.9358 73.7903 33.5848 72.6773 34.2748 73.9803 cv
34.2748 74.4033 33.8238 75.1523 34.5408 75.1233 cv
35.1278 74.9633 34.5408 74.5403 34.5408 74.1133 cv
35.2588 73.1813 36.8288 73.1293 37.2788 71.9583 cv
36.1898 70.2563 35.0208 71.9043 33.8468 72.3853 cv
50.0218 69.6443 mo
51.1948 69.8553 53.5308 70.1503 53.8028 68.9793 cv
53.2168 67.4903 49.8138 67.5693 50.0218 69.6443 cv
26.2428 68.9793 mo
27.1438 69.4863 29.2718 69.6443 29.9648 68.8183 cv
29.4598 67.8333 29.4598 66.9863 29.5398 66.1073 cv
28.1038 66.6663 26.7178 67.4093 26.2428 68.9793 cv
49.3338 67.4903 mo
49.9438 66.7723 49.6498 64.9343 48.5888 64.9343 cv
48.1588 65.5213 47.9508 67.8083 49.3338 67.4903 cv
41.8838 61.6363 mo
41.3508 62.4593 41.9348 63.8433 42.7328 64.2173 cv
44.0648 63.6313 43.6378 61.3963 41.8838 61.6363 cv
34.8588 62.6473 mo
34.2198 62.6473 34.3548 61.8753 33.5848 62.0613 cv
33.6898 63.1513 32.6768 63.1513 32.4138 63.7633 cv
32.5708 64.5383 33.5848 64.5383 33.8468 65.2283 cv
36.1118 65.1743 36.7228 63.5243 38.6908 63.2053 cv
38.3178 60.5463 36.2978 61.7713 34.8588 62.6473 cv
61.4858 62.1973 mo
61.8038 62.9673 63.0048 62.8073 63.2158 63.6313 cv
62.7898 65.2283 64.1228 66.0273 64.3898 67.3853 cv
63.5368 68.6073 62.2038 67.4903 61.8038 66.6663 cv
61.1718 66.7723 60.7708 67.0923 60.7708 67.8083 cv
64.0678 68.0183 62.2608 71.8523 60.2128 72.5153 cv
59.5948 72.7823 58.7478 72.5153 58.0558 72.6773 cv
57.2588 72.8893 56.5088 73.7903 55.6348 74.1133 cv
54.2768 74.5893 53.0268 74.1933 52.2048 74.8573 cv
51.7808 76.5343 51.9908 78.6093 53.2168 78.5843 cv
54.4388 78.5283 54.3838 76.1073 55.6348 75.7093 cv
57.4188 76.0003 57.2338 74.5893 58.2138 74.2733 cv
58.7478 74.0593 59.3588 74.4323 60.0558 74.2733 cv
62.0458 73.7133 62.5778 71.1343 63.8028 69.6443 cv
67.0458 70.0453 67.8438 67.2223 67.9518 64.9343 cv
66.1438 65.2843 63.9648 65.5213 63.6428 63.9513 cv
63.4818 62.8073 64.5208 62.3033 64.8158 61.2133 cv
63.9648 59.7463 61.7018 60.8923 61.4858 62.1973 cv
74.9748 60.9463 mo
76.0418 60.3343 75.4548 58.1013 74.2868 58.0463 cv
73.7768 58.8693 73.7768 60.9183 74.9748 60.9463 cv
58.4838 51.7393 mo
57.3128 52.1943 56.6458 53.2573 56.3538 54.5623 cv
57.3128 54.9593 57.4958 53.6023 58.3188 53.4713 cv
59.3058 54.0003 59.2808 55.5173 60.3448 55.8903 cv
60.6078 56.3173 61.8848 55.7303 61.9388 56.3173 cv
61.9388 57.0883 60.7148 57.0883 59.9198 57.4883 cv
59.0668 57.9123 57.4958 59.1623 56.1928 59.9633 cv
53.9098 61.2633 50.9278 62.9673 54.3318 64.4843 cv
54.7048 64.1913 54.3068 63.4713 54.4918 63.1263 cv
54.7568 62.4363 57.5758 60.4393 57.8988 60.3853 cv
58.4838 60.2793 59.1448 60.7063 59.6528 60.6253 cv
61.1408 60.4393 61.4858 59.0013 62.7898 58.4453 cv
63.6128 58.6343 64.4428 58.7903 65.5628 58.7653 cv
66.8608 59.2153 66.1728 61.6923 67.6838 61.9543 cv
68.3778 61.0003 67.8438 59.6663 68.6978 58.7653 cv
68.5618 57.8343 67.7138 57.5913 67.8178 56.5013 cv
68.0578 55.9443 68.6978 55.8103 69.2568 55.5973 cv
70.6118 56.5813 70.3458 59.1883 71.6788 60.1723 cv
72.8468 59.4573 73.1408 56.8503 72.4208 55.5973 cv
71.7828 54.5623 69.8168 54.1643 69.3858 53.3653 cv
66.0378 53.3903 63.4818 54.2133 60.9288 55.0133 cv
59.9198 54.1643 59.4888 52.6713 58.4838 51.7393 cv
70.9568 49.5883 mo
70.2158 49.5063 69.9228 50.3313 69.9718 50.8643 cv
70.0818 51.8473 71.8358 52.9383 72.8468 52.8853 cv
72.5248 52.2753 71.6788 49.6933 70.9568 49.5883 cv
61.8038 51.0213 mo
61.8358 51.0783 62.1008 51.3143 62.1008 51.3943 cv
62.6338 51.7393 63.0048 51.0783 63.6428 51.0213 cv
64.8158 50.9173 65.6638 51.5813 66.3808 51.5813 cv
67.0738 50.9173 66.4618 49.6933 65.6638 49.5883 cv
64.7068 51.1253 61.3308 48.3343 61.8038 51.0213 cv
61.8038 44.3203 mo
60.5028 45.3293 57.9998 46.3393 58.7998 48.4693 cv
58.9068 48.4963 59.0668 48.4693 59.0668 48.5773 cv
60.7148 48.0963 61.1718 46.3393 62.3688 45.3053 cv
63.3778 44.4523 65.2398 43.8943 65.0798 41.9533 cv
63.4288 41.3393 62.8478 43.4433 61.8038 44.3203 cv
52.7908 43.8403 mo
52.9498 44.0523 53.3728 44.0253 53.8028 44.0253 cv
54.1738 43.1733 54.3068 42.0343 54.7568 41.3133 cv
53.5068 40.9143 52.6828 42.8313 52.7908 43.8403 cv
58.0558 44.4523 mo
59.4888 44.8003 60.0258 43.0673 60.6648 42.1373 cv
60.2918 41.4473 60.5028 40.1423 59.4888 40.1153 cv
59.6248 42.1643 58.6418 43.0943 58.0558 44.4523 cv
66.5438 37.9623 mo
67.2568 38.5193 66.3038 39.3943 66.6718 39.9553 cv
68.7508 39.5553 71.3288 41.1533 71.5428 42.2713 cv
71.8358 43.7083 70.2388 45.2503 70.6658 47.1363 cv
74.1768 49.3753 75.0288 54.2693 79.0198 56.0753 cv
80.7478 59.3493 81.8908 64.2963 81.1468 68.8183 cv
80.5628 72.2513 77.1568 72.6223 77.8488 77.1213 cv
78.1698 79.0583 79.3378 82.9703 80.7198 83.5843 cv
81.6258 83.9843 82.8518 83.5043 83.7538 84.1413 cv
84.4708 85.0203 84.1268 86.9353 83.5928 87.7603 cv
80.8268 88.2663 79.8168 91.1913 76.4138 90.0463 cv
75.1338 89.5703 72.9018 88.1033 72.2628 87.0153 cv
71.8358 86.3223 71.8888 85.3383 71.5428 84.5933 cv
70.8258 82.9703 69.5468 81.9873 68.8038 80.8423 cv
66.7298 81.4823 60.3448 80.3923 61.3568 83.7423 cv
61.8358 85.2343 66.8878 84.4873 65.2398 88.3173 cv
64.6528 89.6473 60.2918 91.5103 58.6418 91.8853 cv
58.0558 91.9893 56.9928 92.0683 56.6198 92.0153 cv
56.0868 91.9643 55.6108 91.4583 54.9188 91.2963 cv
53.5308 91.0313 51.6718 91.6443 50.1828 91.2963 cv
49.2758 91.1373 46.7758 89.3563 45.8708 88.5833 cv
45.2868 88.0523 44.1188 86.6153 43.9038 86.0013 cv
43.2388 84.4343 43.6678 83.1313 41.9858 82.4143 cv
41.2438 82.0933 40.2888 82.2263 39.4368 81.9873 cv
37.8948 81.6153 36.2428 80.3623 34.9958 81.2963 cv
33.4258 83.0243 35.8988 83.7693 36.6948 85.2883 cv
37.4658 86.7223 36.9888 87.7893 37.1498 89.8633 cv
36.6418 90.5523 35.5498 91.8023 34.2748 92.0153 cv
32.5448 92.3353 30.2028 91.0313 27.7848 90.4473 cv
26.2148 90.0463 23.8488 90.0463 23.5288 88.4523 cv
23.3158 87.4393 24.3228 86.8543 24.5088 86.0013 cv
24.8028 84.8613 24.1658 83.9553 24.9398 83.0243 cv
23.8488 81.3473 24.3228 78.7393 24.2158 75.7093 cv
24.1128 72.4103 24.1658 70.1773 24.9398 67.8083 cv
25.2298 66.9573 25.2828 65.9723 25.5498 65.4943 cv
25.9768 64.4843 28.9288 62.1173 30.1248 61.5043 cv
32.8358 59.9863 37.3578 58.7903 42.1508 59.4823 cv
43.1598 59.5883 44.0648 60.4393 45.0188 60.6253 cv
46.8338 60.9463 49.2758 60.4393 51.1948 60.6253 cv
51.7808 60.2793 52.2568 59.9093 52.6308 59.3493 cv
52.7908 56.2373 51.0348 55.0133 50.1828 52.8853 cv
50.5808 49.7443 49.6498 46.1813 50.7668 43.1733 cv
51.0598 42.3243 52.4698 39.9293 53.2168 39.1053 cv
53.9308 38.2823 55.4508 37.1083 56.3538 36.9513 cv
57.9998 36.6603 60.7708 37.5883 62.3688 38.1223 cv
63.2698 37.4823 65.2908 37.4823 66.5438 37.9623 cv
ef
237.565 87.0155 mo
238.575 86.7225 239.321 86.1645 240.036 85.5785 cv
239.215 85.0205 237.565 85.8185 237.565 87.0155 cv
213.779 78.4235 mo
213.516 79.8315 213.779 80.9255 213.624 82.4135 cv
212.876 83.1065 212.079 83.6345 212.241 84.8615 cv
211.493 85.5785 209.954 85.4715 209.499 86.4555 cv
211.336 87.4675 214.475 87.5465 215.67 86.0015 cv
215.856 85.0205 215.436 83.3975 216.524 83.2635 cv
218.329 83.6345 216.758 87.3325 218.544 87.7605 cv
219.051 86.8815 218.891 84.5935 218.544 83.7425 cv
219.21 83.3175 219.21 82.3075 220.118 82.0935 cv
220.219 82.5735 219.795 83.5835 220.379 83.5835 cv
220.963 83.2365 220.883 81.7745 220.54 81.2965 cv
219.342 81.0295 219.342 81.8805 218.385 81.8805 cv
217.852 80.4695 216.361 80.3925 215.057 81.1355 cv
214.583 80.2575 214.902 79.3525 214.794 78.0245 cv
213.729 77.6235 213.409 76.5575 213.04 75.8145 cv
212.506 77.0135 213.409 77.7855 213.779 78.4235 cv
223.969 75.3905 mo
224.315 75.7095 224.901 75.7095 225.542 75.7095 cv
225.542 75.4695 225.588 75.3905 225.695 75.2305 cv
225.169 74.8835 223.995 73.9805 223.969 75.3905 cv
244.161 74.8575 mo
244.985 74.0595 244.692 71.7185 243.473 71.6675 cv
242.831 72.6215 243.014 74.5395 244.161 74.8575 cv
233.575 72.0885 mo
234.262 72.9665 235.567 73.2905 236.29 74.1135 cv
236.233 74.4325 236.026 74.8575 236.29 75.1225 cv
237.193 75.0465 236.661 74.4325 236.581 73.8195 cv
238.733 72.2515 238.469 76.0005 239.428 77.3815 cv
240.063 78.3185 240.864 78.4235 241.182 79.1155 cv
241.711 79.2215 242.299 79.2725 242.776 79.4065 cv
244.002 81.5875 240.758 82.5735 242.036 84.7545 cv
245.227 85.1775 245.706 79.4585 243.366 78.5835 cv
243.366 78.1035 243.151 77.8905 243.044 77.5705 cv
240.651 77.2505 238.948 74.7805 239.161 72.8355 cv
239.692 73.9005 240.516 73.0765 241.448 73.4995 cv
241.397 72.8895 240.971 72.6215 240.463 72.3855 cv
240.063 72.4105 239.85 72.6775 239.428 72.6775 cv
239.055 72.3585 238.788 71.8525 238.149 71.6675 cv
237.512 71.6675 237.672 72.5155 236.897 72.3855 cv
235.967 71.6095 234.426 70.3645 233.575 72.0885 cv
217.239 69.2195 mo
217.717 69.9885 219.795 69.9085 220.807 69.6445 cv
221.18 67.4905 217.344 67.4095 217.239 69.2195 cv
240.864 68.9795 mo
241.797 69.5905 243.473 69.3515 244.614 69.1135 cv
244.243 67.3855 242.776 66.6925 241.313 66.1075 cv
241.448 67.0095 241.313 67.9395 240.864 68.9795 cv
221.977 64.9345 mo
221.336 65.3085 220.883 66.8255 221.551 67.4905 cv
222.963 67.8325 223.094 65.1205 221.977 64.9345 cv
228.256 64.2175 mo
228.891 63.7385 229.532 62.7005 229.106 61.6365 cv
227.272 61.3675 226.71 63.7635 228.256 64.2175 cv
232.139 63.1265 mo
233.999 63.5245 234.799 65.1205 237.03 65.2285 cv
237.241 64.4845 238.419 64.5625 238.575 63.7635 cv
238.149 63.2045 237.219 63.1515 237.299 62.0615 cv
236.446 61.8755 236.661 62.7535 235.86 62.6475 cv
234.481 61.5835 232.725 60.7855 232.139 63.1265 cv
206.071 61.2125 mo
206.467 62.1975 207.241 62.8075 207.319 64.0575 cv
206.708 65.6525 204.364 64.9885 202.876 65.0395 cv
203.221 67.0635 203.62 70.1775 207.026 69.5375 cv
208.143 71.2655 208.995 73.1815 210.801 74.2735 cv
213.303 73.3155 213.092 75.8145 215.219 75.7095 cv
216.495 76.0805 216.442 78.5015 217.641 78.5835 cv
219.051 78.6885 219.129 76.1075 218.678 74.6975 cv
217.454 74.1935 216.361 74.6195 215.057 74.1135 cv
214.45 73.8725 213.995 73.0485 213.356 72.8355 cv
212.397 72.5155 211.364 72.8895 210.486 72.5155 cv
209.26 72.0375 208.301 70.1775 208.301 68.6595 cv
208.596 67.9695 209.897 68.3425 210.061 67.4905 cv
210.006 66.9565 209.633 66.7725 209.208 66.6655 cv
208.676 67.4905 207.266 68.6595 206.467 67.2225 cv
207.026 66.0275 207.985 65.3085 207.772 63.3135 cv
208.143 62.8075 209.208 62.9675 209.34 62.1975 cv
209.26 60.7575 206.868 59.8555 206.071 61.2125 cv
195.323 60.1725 mo
196.333 61.9535 197.448 59.3755 196.733 58.0455 cv
195.586 58.1015 195.481 59.2155 195.323 60.1725 cv
212.663 51.7395 mo
211.231 52.3805 211.174 54.3495 209.792 55.0135 cv
207.399 54.0565 204.737 53.4165 201.44 53.3655 cv
201.016 54.3195 198.672 54.7475 198.299 56.0755 cv
197.874 57.4325 198.299 59.2685 198.989 60.1725 cv
200.696 59.4285 200.852 53.4165 203.194 56.7435 cv
202.983 57.5915 202.342 58.0455 202.154 58.9215 cv
203.114 59.5615 202.585 60.9465 203.038 61.9535 cv
204.792 61.9535 204.018 59.4825 205.194 58.9215 cv
206.12 58.7115 207.294 58.7115 208.194 58.4455 cv
209.575 59.4285 210.641 61.2635 213.04 60.3855 cv
214.317 61.6925 216.71 62.1975 216.524 64.4845 cv
217.618 64.4845 218.305 63.3135 218.198 62.6475 cv
218.09 61.2905 215.192 60.1725 213.779 59.3495 cv
212.956 58.8455 212.29 58.1525 211.493 57.7515 cv
210.534 57.3005 209.208 57.3545 209.047 56.3175 cv
209.153 55.8375 210.006 56.1035 210.486 56.0755 cv
211.547 55.5705 211.547 53.9505 212.663 53.4715 cv
213.409 53.6025 213.753 54.8795 214.501 54.5625 cv
214.528 53.5765 213.624 52.2755 212.663 51.7395 cv
207.026 50.1715 mo
206.362 50.2505 205.59 49.4805 205.057 49.5875 cv
204.419 49.7445 203.674 51.3705 204.737 51.5805 cv
205.377 51.1835 207.719 50.6515 208.624 51.5805 cv
209.499 51.0215 209.075 50.0375 208.301 49.5875 cv
207.665 49.5605 207.743 50.0645 207.026 50.1715 cv
201.016 50.5985 mo
201.016 50.2505 200.479 49.5065 199.901 49.5875 cv
199.256 49.6935 198.139 52.5375 198.139 52.8855 cv
199.204 52.9645 201.069 51.5285 201.016 50.5985 cv
205.753 41.9525 mo
205.854 44.3715 207.904 44.5055 209.208 45.8625 cv
210.219 46.9525 210.486 48.3915 211.762 48.5775 cv
213.225 46.8195 210.432 44.8005 208.915 44.1585 cv
208.253 43.1735 207.452 41.5005 205.753 41.9525 cv
217.085 44.0255 mo
217.618 44.0785 217.985 43.9485 218.198 43.7075 cv
218.014 42.4565 217.506 41.4735 216.361 41.1535 cv
216.124 41.9525 217.03 42.9625 217.085 44.0255 cv
212.934 44.4525 mo
212.985 43.5205 211.92 43.3345 211.654 42.4295 cv
211.387 41.6605 211.999 40.6215 211.174 39.9545 cv
209.42 41.3395 210.938 44.8005 212.934 44.4525 cv
236.026 81.2965 mo
234.641 80.3925 232.833 81.6665 231.393 81.9875 cv
229.661 82.4135 228.12 82.3845 227.402 83.8765 cv
227.081 84.5655 227.243 85.3385 226.977 86.0015 cv
225.805 88.7965 223.094 89.5135 220.963 91.2955 cv
219.526 91.5655 217.825 91.0045 216.096 91.2955 cv
214.926 91.5105 214.37 92.2575 212.506 91.8855 cv
209.846 91.4045 206.2 89.6475 205.614 88.1565 cv
204.471 85.2875 207.61 84.8085 209.499 84.0075 cv
210.006 81.1355 207.928 81.5875 205.458 81.2965 cv
204.288 81.1355 202.93 80.6835 202.29 80.8425 cv
201.651 81.0295 199.901 83.2365 199.311 84.5935 cv
198.989 85.2875 199.044 86.2415 198.725 86.8815 cv
197.874 88.5825 194.575 90.4195 192.717 90.2865 cv
190.348 90.2075 189.95 88.1035 187.26 87.7605 cv
186.649 86.5625 186.436 84.8615 187.26 84.1415 cv
187.924 83.5835 189.736 83.8765 190.561 83.2635 cv
191.545 82.5735 193.776 76.8535 193.008 74.1135 cv
192.502 72.3585 190.211 70.8145 189.84 69.4055 cv
189.736 68.8735 189.682 67.6735 189.682 66.9295 cv
189.682 63.4715 189.788 58.7655 191.864 56.2095 cv
192.717 55.1195 194.258 54.5625 195.323 53.4715 cv
197.233 51.3945 197.501 48.0425 200.323 47.3265 cv
200.245 45.3285 199.684 43.9235 199.311 42.2715 cv
200.376 40.9675 201.493 39.6615 204.18 39.9545 cv
204.631 39.3195 203.62 38.5725 204.311 37.9615 cv
205.458 37.5375 207.559 37.4285 208.301 38.1215 cv
209.817 37.4825 211.547 37.2145 213.225 36.9515 cv
216.176 36.4975 217.852 39.4755 218.944 41.4475 cv
219.741 42.8305 220.432 43.6545 220.676 45.8625 cv
220.777 46.8725 220.7 48.1765 220.676 49.4805 cv
220.676 50.6215 220.807 51.9845 220.676 52.7515 cv
220.169 55.5975 216.07 58.7655 219.69 60.6255 cv
221.579 60.3855 223.786 60.9995 225.805 60.6255 cv
226.872 60.4395 227.883 59.5885 228.545 59.4825 cv
230.704 59.1095 233.311 59.2685 235.012 59.4825 cv
239.215 60.0395 242.514 62.7815 245.174 65.2285 cv
245.227 66.9035 246.477 68.3425 246.768 70.2035 cv
247.192 73.1815 247.086 77.8905 246.635 80.8425 cv
246.397 82.3305 245.866 83.7425 246.346 85.8445 cv
246.559 86.7995 247.407 87.3605 247.329 88.1565 cv
247.192 90.0465 244.797 90.0465 242.776 90.6055 cv
239.161 91.5915 235.329 93.3715 233.733 89.7555 cv
233.813 87.6225 233.495 86.5625 234.319 85.1265 cv
235.065 83.7425 237.241 83.2635 236.026 81.2965 cv
ef
162.31 49.0273 mo
163.189 48.8953 163.453 47.8823 164.621 48.0423 cv
166.433 48.1763 166.859 53.0713 167.07 55.4903 cv
167.394 59.7463 167.017 71.1883 162.759 67.3853 cv
162.655 66.4533 162.818 65.8133 163.031 65.2283 cv
161.005 64.0313 156.962 63.1263 153.425 62.7813 cv
151.644 62.6473 149.14 62.8873 149.831 60.4913 cv
150.394 58.5763 154.888 59.8013 156.72 60.0403 cv
159.57 60.5193 161.218 61.0003 163.453 61.6363 cv
163.929 61.2633 163.667 60.1733 163.902 59.4823 cv
162.232 58.2323 156.564 56.7433 152.865 56.5013 cv
151.056 56.3713 149.249 56.5813 149.249 54.7733 cv
149.249 53.9503 149.888 53.7093 150.419 53.1763 cv
155.576 53.2573 159.755 54.2693 163.615 55.5973 cv
164.677 51.9843 159.943 51.5283 157.28 50.8643 cv
154.621 50.2503 151.906 50.1183 149.831 49.8813 cv
148.664 49.2953 148.771 46.9263 150.55 46.8733 cv
153.851 46.7923 160.152 48.0423 162.31 49.0273 cv
ef
121.741 74.8573 mo
127.326 79.7283 140.949 79.7283 146.533 74.8573 cv
139.882 72.6773 128.366 72.6773 121.741 74.8573 cv
108.225 72.3853 mo
110.17 76.0813 112.908 78.9023 115.996 81.4283 cv
118.075 80.6833 120.331 80.0723 122.752 79.6993 cv
121.795 78.7923 120.595 78.2643 119.291 77.2503 cv
118.34 76.5343 116.476 75.4693 116.556 73.9803 cv
116.685 72.4103 120.041 71.6093 122.302 71.1053 cv
129.828 69.4313 138.661 69.6443 145.843 71.2113 cv
148.077 71.7453 151.859 72.3323 151.859 74.1133 cv
151.859 75.1233 150.152 76.5873 149.249 77.2503 cv
148.025 78.2643 146.64 78.3693 145.843 79.6993 cv
148.505 79.8853 150.525 80.7373 152.704 81.4283 cv
155.954 79.1663 158.396 76.1073 160.152 72.3853 cv
146.478 66.6663 122.086 67.0633 108.225 72.3853 cv
140.523 89.7553 mo
137.329 85.6043 147.544 86.0293 148.821 83.8763 cv
147.413 83.1553 145.419 82.8103 143.528 82.5733 cv
141.587 82.3073 139.589 82.0933 137.783 82.0933 cv
137.913 84.9663 139.193 89.8633 136.106 90.7413 cv
133.924 91.2953 127.223 90.6873 126.905 89.1433 cv
126.236 85.6043 132.011 87.9183 134.617 87.5743 cv
135.305 86.0293 134.697 83.4513 134.191 82.0933 cv
129.058 81.6663 124.138 82.6513 119.878 83.5843 cv
121.154 85.5783 124.881 85.0743 125.174 87.0153 cv
125.893 91.2953 118.497 86.9613 117.429 86.2703 cv
113.39 83.9553 110.433 81.2693 107.533 77.3813 cv
106.393 75.8713 104.076 72.9423 104.236 71.4003 cv
104.396 69.8553 107.774 68.9793 109.982 68.3923 cv
122.887 64.9103 137.755 63.5783 152.12 66.5053 cv
154.064 66.9033 156.298 67.6493 158.556 68.3923 cv
160.447 68.9793 163.958 69.7503 164.199 71.1053 cv
164.491 72.8893 161.189 77.0903 160.447 78.1303 cv
157.173 82.5203 153.798 85.2573 148.712 87.5743 cv
146.322 88.6363 143.609 89.8333 140.523 89.7553 cv
ef
38.8501 174.001 mo
38.8501 173.682 38.7141 173.284 38.5831 172.671 cv
38.4241 172.114 38.2921 171.69 38.1321 171.529 cv
37.8951 171.157 37.4371 170.89 36.7231 170.784 cv
36.0261 170.678 35.1801 170.597 34.1151 170.597 cv
18.8721 170.597 li
18.8721 169.294 li
35.8691 156.736 li
25.1501 156.736 li
23.9551 156.736 23.0501 156.79 22.4121 156.95 cv
21.7461 157.085 21.2941 157.297 21.0251 157.668 cv
20.8141 157.882 20.6011 158.362 20.4411 159.051 cv
20.2281 159.742 20.1211 160.194 20.1211 160.408 cv
19.1091 160.408 li
19.1091 151.924 li
20.1211 151.924 li
20.1751 152.189 20.2281 152.641 20.4411 153.228 cv
20.6011 153.866 20.7611 154.238 20.8681 154.397 cv
21.1351 154.746 21.5581 155.009 22.0901 155.089 cv
22.6751 155.224 23.6361 155.327 25.0171 155.327 cv
35.2331 155.327 li
35.6571 155.327 36.1121 155.224 36.5631 155.063 cv
37.0391 154.903 37.3581 154.719 37.6241 154.449 cv
37.9451 154.053 38.2111 153.573 38.4521 153.015 cv
38.6911 152.431 38.7981 151.924 38.8501 151.524 cv
39.8601 151.524 li
39.8601 157.483 li
24.0031 169.136 li
33.9011 169.136 li
35.1031 169.136 36.0561 169.105 36.6951 168.923 cv
37.3581 168.815 37.7881 168.549 38.0011 168.23 cv
38.1861 167.966 38.3711 167.565 38.5311 166.926 cv
38.6911 166.286 38.7981 165.811 38.8501 165.516 cv
39.8601 165.516 li
39.8601 174.001 li
cp
f
28.3706 188.553 mo
36.1126 184.617 li
27.7846 182.33 li
cp
20.8136 197.704 mo
19.9076 189.14 li
20.9446 189.033 li
21.0806 189.777 21.2406 190.419 21.4526 190.894 cv
21.6096 191.374 21.8226 191.585 22.0906 191.585 cv
22.1466 191.585 22.2496 191.56 22.3556 191.507 cv
22.4646 191.48 22.5926 191.452 22.6756 191.374 cv
27.1436 189.219 li
26.4286 181.956 li
25.7046 181.743 25.0966 181.558 24.5906 181.477 cv
24.0576 181.346 23.5836 181.21 23.1546 181.159 cv
22.6756 181.055 22.3556 181.055 22.0906 180.998 cv
21.4526 180.998 li
21.0546 181.055 20.8136 181.346 20.6286 182.01 cv
20.4996 182.649 20.4406 183.313 20.4706 184.084 cv
19.4326 184.192 li
18.6306 176.369 li
19.6676 176.318 li
19.7246 176.558 19.8046 176.876 19.9316 177.275 cv
20.0686 177.62 20.2276 177.913 20.4406 178.125 cv
20.7076 178.526 21.0246 178.766 21.3186 178.979 cv
21.6096 179.164 22.0386 179.323 22.5696 179.486 cv
25.2826 180.256 28.3176 181.055 31.6676 182.037 cv
35.0206 182.94 38.0016 183.765 40.6586 184.51 cv
40.7676 185.654 li
23.6066 194.379 li
23.2626 194.512 22.9426 194.726 22.7286 194.937 cv
22.5166 195.152 22.3026 195.443 22.1466 195.816 cv
22.0386 196.056 21.9316 196.347 21.9036 196.696 cv
21.8226 197.069 21.8226 197.361 21.8226 197.624 cv
cp
f
45.5005 219.437 mo
45.4465 219.198 45.2865 218.773 45.0195 218.241 cv
44.7575 217.761 44.4855 217.39 44.3035 217.178 cv
44.0115 216.911 43.4805 216.779 42.7615 216.779 cv
42.0925 216.805 41.1915 216.938 40.1515 217.178 cv
25.2825 220.451 li
25.0175 219.224 li
38.9285 203.263 li
28.4485 205.551 li
27.2755 205.791 26.4005 206.084 25.8135 206.374 cv
25.2065 206.697 24.8035 207.014 24.5905 207.364 cv
24.4295 207.627 24.3225 208.131 24.3225 208.825 cv
24.2715 209.596 24.2715 210.073 24.3225 210.233 cv
23.3155 210.499 li
21.4525 202.172 li
22.4645 201.935 li
22.5695 202.2 22.7825 202.599 23.0775 203.183 cv
23.3685 203.772 23.5835 204.086 23.7665 204.223 cv
24.1135 204.541 24.5365 204.649 25.1235 204.649 cv
25.7045 204.649 26.6695 204.541 27.9975 204.223 cv
37.9725 202.013 li
38.4245 201.906 38.8505 201.749 39.2775 201.509 cv
39.6495 201.243 39.9405 200.953 40.1245 200.661 cv
40.3925 200.258 40.5515 199.673 40.6585 199.087 cv
40.7125 198.42 40.7405 197.916 40.6875 197.573 cv
41.6945 197.36 li
42.9985 203.132 li
30.0195 218.003 li
39.6495 215.819 li
40.8745 215.555 41.7195 215.315 42.3635 214.993 cv
42.9745 214.728 43.3185 214.436 43.4805 214.064 cv
43.5835 213.771 43.6905 213.268 43.7165 212.656 cv
43.7455 212.017 43.7455 211.513 43.6905 211.247 cv
44.7005 210.98 li
46.5395 219.253 li
cp
f
51.9907 231.647 mo
51.8327 231.41 51.6167 231.117 51.3807 230.823 cv
51.1147 230.533 50.8737 230.292 50.6577 230.079 cv
50.3677 229.839 50.1027 229.708 49.8137 229.786 cv
49.5427 229.815 49.2247 229.893 48.9557 230.079 cv
38.2627 236.199 li
37.7087 236.515 37.0657 236.755 36.2987 236.862 cv
35.5507 236.997 34.8067 236.997 34.0607 236.862 cv
33.2127 236.649 32.4137 236.359 31.6677 235.852 cv
30.9757 235.346 30.3627 234.599 29.8297 233.722 cv
29.0597 232.393 28.7627 231.06 29.0597 229.708 cv
29.3787 228.404 30.1247 227.391 31.4777 226.645 cv
32.0147 226.331 32.6247 226.168 33.2617 226.168 cv
33.8467 226.224 34.3277 226.541 34.7007 227.125 cv
34.9387 227.658 35.0457 228.082 34.9137 228.562 cv
34.8587 229.042 34.5407 229.415 34.0907 229.708 cv
33.7997 229.867 33.4737 229.972 33.1547 230.027 cv
32.8357 230.079 32.5447 230.079 32.2547 230.079 cv
31.9587 230.052 31.6677 230.052 31.2957 230.052 cv
30.9487 230.027 30.6327 230.052 30.3877 230.079 cv
30.2307 230.4 30.1247 230.823 30.1247 231.356 cv
30.1247 231.861 30.3087 232.393 30.6537 233.03 cv
31.0317 233.67 31.5077 234.071 31.9867 234.284 cv
32.4907 234.522 33.0517 234.599 33.6347 234.522 cv
34.1677 234.468 34.8067 234.284 35.5017 233.991 cv
36.1897 233.67 36.9347 233.351 37.7087 232.898 cv
47.2557 227.391 li
47.5207 227.205 47.7597 227.02 47.8947 226.858 cv
48.0557 226.621 48.1077 226.331 48.1077 225.931 cv
48.0787 225.585 47.9717 225.184 47.8427 224.735 cv
47.6787 224.306 47.5207 223.987 47.3897 223.693 cv
48.3217 223.19 li
52.8727 231.117 li
cp
f
44.6763 255.432 mo
39.0053 248.012 li
39.8083 247.37 li
40.0183 247.555 40.2883 247.874 40.5803 248.249 cv
40.9253 248.596 41.1923 248.859 41.3513 248.995 cv
41.6713 249.152 41.9353 249.208 42.1993 249.208 cv
42.4683 249.152 42.7613 249.045 43.0523 248.836 cv
55.0193 239.682 li
55.2903 239.495 55.5043 239.285 55.6353 239.044 cv
55.7403 238.831 55.7403 238.51 55.6353 238.088 cv
55.5293 237.77 55.3983 237.396 55.2133 236.997 cv
55.0193 236.596 54.8613 236.305 54.7043 236.038 cv
55.5293 235.398 li
61.1943 242.824 li
60.3453 243.46 li
60.1873 243.223 59.9193 242.98 59.6243 242.689 cv
59.3333 242.37 59.0433 242.132 58.7473 241.945 cv
58.4843 241.732 58.1653 241.652 57.8693 241.704 cv
57.5753 241.758 57.3133 241.889 57.0453 242.077 cv
45.0993 251.228 li
44.8643 251.413 44.6503 251.624 44.5403 251.895 cv
44.4353 252.188 44.4103 252.452 44.4853 252.848 cv
44.5693 253.01 44.7303 253.381 44.9143 253.755 cv
45.1293 254.204 45.3163 254.555 45.5003 254.792 cv
cp
f
80.4033 262.8 mo
80.1873 262.614 79.8173 262.374 79.3373 262.081 cv
78.8043 261.816 78.4333 261.654 78.1163 261.602 cv
77.6893 261.549 77.2083 261.708 76.6223 262.109 cv
76.0943 262.561 75.4013 263.145 74.7133 263.919 cv
64.1733 274.93 li
63.2703 274.055 li
65.8763 253.064 li
58.4843 260.805 li
57.6563 261.708 57.0733 262.374 56.7263 262.987 cv
56.4073 263.547 56.2743 264.076 56.3013 264.446 cv
56.3013 264.797 56.5093 265.247 56.8893 265.858 cv
57.2593 266.471 57.5233 266.867 57.6863 267.031 cv
56.9923 267.775 li
50.7933 261.867 li
51.5403 261.152 li
51.7243 261.339 52.0973 261.549 52.6833 261.842 cv
53.2713 262.162 53.6383 262.347 53.8523 262.347 cv
54.3073 262.374 54.7573 262.241 55.2353 261.867 cv
55.6883 261.549 56.4073 260.938 57.3133 259.955 cv
64.4433 252.53 li
64.7063 252.188 64.9713 251.867 65.1833 251.413 cv
65.3673 250.964 65.4563 250.59 65.4263 250.244 cv
65.3973 249.712 65.2393 249.208 64.9713 248.647 cv
64.6803 248.035 64.4433 247.639 64.1733 247.319 cv
64.8633 246.571 li
69.1753 250.697 li
66.7303 270.221 li
73.5373 263.091 li
74.3633 262.188 74.9753 261.442 75.2953 260.908 cv
75.6103 260.327 75.7193 259.848 75.7193 259.475 cv
75.6103 259.182 75.4013 258.703 75.0813 258.17 cv
74.7613 257.637 74.4983 257.24 74.2863 256.974 cv
74.9753 256.229 li
81.0923 262.055 li
cp
f
92.1616 284.186 mo
91.9486 284.082 91.6236 283.946 91.3076 283.76 cv
90.9356 283.601 90.6456 283.496 90.3796 283.442 cv
90.0286 283.442 89.7626 283.468 89.4726 283.625 cv
89.2616 283.76 89.0236 284 88.8076 284.32 cv
87.9036 285.65 li
87.2616 286.63 86.7866 287.274 86.5996 287.621 cv
86.3606 287.993 86.2026 288.23 86.0966 288.468 cv
84.6576 288.23 83.3316 287.912 82.1046 287.431 cv
80.8786 286.926 79.7086 286.393 78.6976 285.73 cv
77.6086 284.931 76.6776 284.027 75.9606 282.938 cv
75.1876 281.819 74.7136 280.648 74.4716 279.4 cv
74.2276 278.041 74.2276 276.712 74.5526 275.328 cv
74.8136 273.944 75.4006 272.507 76.3596 271.179 cv
77.2086 269.848 78.2756 268.785 79.4726 267.959 cv
80.6676 267.136 81.9446 266.577 83.2726 266.283 cv
84.5776 265.99 85.9386 265.99 87.2906 266.253 cv
88.6456 266.523 89.9756 267.083 91.1496 267.878 cv
92.1086 268.544 92.9066 269.236 93.4896 269.982 cv
94.0206 270.7 94.4476 271.367 94.8176 272.083 cv
95.8286 271.577 li
96.8146 272.27 li
92.8496 278.36 li
91.8946 277.669 li
92.1616 276.869 92.3726 276.152 92.5296 275.301 cv
92.7436 274.477 92.7996 273.705 92.7436 272.88 cv
92.6906 272.11 92.4816 271.367 92.1086 270.7 cv
91.7606 270.035 91.1496 269.395 90.4076 268.863 cv
89.5016 268.305 88.6456 267.931 87.7176 267.827 cv
86.7866 267.72 85.8316 267.827 84.8716 268.2 cv
83.9126 268.518 82.9586 269.104 82.0526 269.982 cv
81.0926 270.806 80.1866 271.79 79.3376 273.013 cv
78.6206 274.105 78.0596 275.22 77.6636 276.389 cv
77.2656 277.536 77.1026 278.653 77.1026 279.69 cv
77.1296 280.73 77.3726 281.741 77.8486 282.671 cv
78.3236 283.549 79.0466 284.347 79.9796 285.012 cv
80.7206 285.49 81.4116 285.86 82.1576 285.97 cv
82.9016 286.127 83.4876 286.235 83.8586 286.127 cv
84.2326 285.73 84.5566 285.383 84.8456 284.931 cv
85.1366 284.506 85.4006 284.132 85.5876 283.869 cv
86.2026 282.912 li
86.4686 282.565 86.6276 282.244 86.6816 281.925 cv
86.7866 281.608 86.7576 281.261 86.5196 280.941 cv
86.3076 280.648 86.0456 280.276 85.6436 279.933 cv
85.1906 279.559 84.8716 279.265 84.6056 279.133 cv
85.1906 278.175 li
92.7696 283.308 li
cp
f
144.302 287.567 mo
144.03 287.567 143.661 287.621 143.13 287.751 cv
142.599 287.858 142.171 287.993 141.827 288.204 cv
141.48 288.443 141.267 288.92 141.157 289.615 cv
141.029 290.306 140.948 291.156 140.948 292.167 cv
140.948 301.213 li
140.948 302.331 140.708 303.339 140.23 304.192 cv
139.726 305.069 139.112 305.762 138.343 306.32 cv
137.593 306.825 136.769 307.251 135.892 307.434 cv
135.043 307.701 134.247 307.81 133.444 307.81 cv
132.22 307.81 131.079 307.648 130.119 307.304 cv
129.136 306.986 128.339 306.534 127.646 305.973 cv
127.008 305.414 126.504 304.805 126.21 304.055 cv
125.84 303.339 125.679 302.597 125.679 301.822 cv
125.679 289.588 li
125.679 289.189 125.626 288.92 125.52 288.684 cv
125.416 288.443 125.174 288.23 124.827 288.07 cv
124.613 287.912 124.294 287.778 123.895 287.697 cv
123.497 287.621 123.179 287.567 122.965 287.567 cv
122.965 286.504 li
131.586 286.504 li
131.586 287.567 li
131.317 287.567 130.971 287.59 130.572 287.673 cv
130.148 287.751 129.857 287.858 129.668 287.912 cv
129.298 287.993 129.082 288.23 129.005 288.468 cv
128.872 288.79 128.818 289.109 128.818 289.425 cv
128.818 300.868 li
128.818 301.399 128.872 302.011 129.005 302.597 cv
129.136 303.208 129.378 303.765 129.722 304.326 cv
130.119 304.856 130.626 305.282 131.292 305.602 cv
131.957 305.947 132.806 306.161 133.983 306.161 cv
135.043 306.161 135.949 305.947 136.691 305.602 cv
137.386 305.282 137.993 304.856 138.392 304.298 cv
138.765 303.765 139.087 303.208 139.269 302.622 cv
139.403 302.038 139.509 301.505 139.509 300.892 cv
139.509 292.404 li
139.509 291.29 139.403 290.409 139.269 289.719 cv
139.087 289.055 138.872 288.576 138.607 288.363 cv
138.236 288.123 137.755 287.935 137.196 287.778 cv
136.579 287.673 136.135 287.567 135.814 287.567 cv
135.814 286.504 li
144.302 286.504 li
cp
f
168.427 277.033 mo
168.187 277.19 167.814 277.402 167.394 277.776 cv
166.907 278.176 166.593 278.467 166.433 278.707 cv
166.22 279.054 166.195 279.559 166.38 280.224 cv
166.515 280.941 166.808 281.764 167.228 282.724 cv
173.32 296.663 li
172.126 297.222 li
153.823 286.661 li
158.107 296.476 li
158.556 297.569 158.982 298.393 159.409 298.897 cv
159.808 299.483 160.21 299.774 160.583 299.883 cv
160.9 300.016 161.405 300.016 162.095 299.883 cv
162.818 299.804 163.294 299.694 163.505 299.617 cv
163.929 300.572 li
156.085 304.008 li
155.659 303.019 li
155.925 302.915 156.269 302.622 156.802 302.195 cv
157.28 301.822 157.573 301.505 157.679 301.347 cv
157.892 300.972 157.921 300.465 157.814 299.883 cv
157.708 299.323 157.388 298.472 156.855 297.169 cv
152.759 287.804 li
152.546 287.406 152.331 286.98 152.015 286.661 cv
151.693 286.34 151.378 286.103 151.003 285.971 cv
150.577 285.86 150.017 285.73 149.405 285.783 cv
148.741 285.834 148.236 285.917 147.892 286.077 cv
147.491 285.093 li
152.919 282.724 li
169.943 292.566 li
166.007 283.496 li
165.527 282.405 165.075 281.581 164.677 281.023 cv
164.275 280.462 163.902 280.169 163.532 280.117 cv
163.189 280.011 162.759 280.011 162.095 280.117 cv
161.484 280.224 161.005 280.356 160.689 280.462 cv
160.288 279.477 li
168.027 276.152 li
cp
f
189.227 289.056 mo
180.823 293.154 li
180.37 292.22 li
180.612 292.115 180.928 291.876 181.383 291.663 cv
181.807 291.397 182.102 291.157 182.231 291.023 cv
182.448 290.733 182.606 290.466 182.631 290.2 cv
182.657 289.933 182.606 289.616 182.448 289.323 cv
175.791 275.808 li
175.69 275.489 175.5 275.221 175.317 275.062 cv
175.104 274.93 174.784 274.876 174.36 274.903 cv
174.041 274.93 173.666 275.008 173.243 275.062 cv
172.762 275.196 172.442 275.302 172.178 275.41 cv
171.696 274.478 li
180.131 270.382 li
180.584 271.314 li
180.319 271.446 180.026 271.66 179.652 271.873 cv
179.309 272.084 178.986 272.325 178.772 272.587 cv
178.506 272.827 178.35 273.175 178.35 273.468 cv
178.35 273.705 178.454 273.998 178.559 274.292 cv
185.161 287.805 li
185.291 288.098 185.479 288.338 185.743 288.469 cv
185.956 288.656 186.276 288.708 186.649 288.685 cv
186.862 288.685 187.207 288.629 187.659 288.469 cv
188.088 288.364 188.483 288.231 188.776 288.123 cv
cp
f
199.421 256.416 mo
199.232 256.626 198.989 256.869 198.778 257.162 cv
198.567 257.453 198.433 257.797 198.355 258.039 cv
198.224 258.41 198.14 258.728 198.224 259.13 cv
198.275 259.475 198.355 259.928 198.462 260.375 cv
198.937 262.028 199.685 264.53 200.696 267.879 cv
201.757 271.26 202.823 274.771 203.939 278.443 cv
203.009 279.187 li
199.55 277.14 196.228 275.169 193.032 273.2 cv
189.788 271.286 187.634 270.01 186.491 269.318 cv
186.222 269.186 185.931 269.049 185.611 268.971 cv
185.317 268.946 185.001 268.946 184.628 268.971 cv
184.308 269.025 183.989 269.104 183.698 269.236 cv
183.407 269.372 183.138 269.529 182.898 269.635 cv
182.232 268.839 li
188.939 263.493 li
189.63 264.288 li
189.044 264.797 188.618 265.247 188.298 265.62 cv
187.982 266.018 187.925 266.313 188.089 266.523 cv
188.14 266.628 188.249 266.735 188.351 266.791 cv
188.483 266.896 188.567 266.978 188.671 267.031 cv
189.525 267.56 190.96 268.359 192.954 269.556 cv
194.952 270.807 197.765 272.455 201.441 274.611 cv
200.853 272.75 200.216 270.54 199.443 268.014 cv
198.646 265.487 198.089 263.783 197.765 262.853 cv
197.478 261.922 197.233 261.364 197.079 261.098 cv
196.892 260.778 196.733 260.541 196.626 260.351 cv
196.491 260.165 196.275 260.085 196.013 260.111 cv
195.751 260.111 195.482 260.165 195.161 260.299 cv
194.845 260.435 194.521 260.591 194.206 260.778 cv
193.939 260.937 193.671 261.098 193.405 261.282 cv
192.718 260.458 li
198.778 255.645 li
cp
f
222.638 249.659 mo
227.081 253.86 li
216.019 267.11 li
215.22 266.471 li
215.408 266.23 215.618 265.887 215.915 265.487 cv
216.152 265.06 216.314 264.797 216.337 264.581 cv
216.443 264.288 216.415 264.026 216.337 263.783 cv
216.232 263.519 216.019 263.277 215.751 263.066 cv
204.288 253.462 li
204.046 253.25 203.783 253.114 203.513 253.063 cv
203.275 252.984 202.984 253.011 202.617 253.171 cv
202.343 253.277 202.077 253.515 201.704 253.755 cv
201.333 254.048 201.07 254.287 200.853 254.474 cv
200.083 253.86 li
210.378 241.465 li
214.21 244.685 li
213.517 245.533 li
212.829 245.19 211.921 245.003 210.909 245.003 cv
209.818 244.973 209.075 245.16 208.65 245.533 cv
208.409 245.747 208.195 246.013 207.88 246.28 cv
207.611 246.571 207.294 246.971 206.919 247.371 cv
204.896 249.899 li
211.175 255.164 li
212.722 253.381 li
213.173 252.824 213.49 252.345 213.624 252 cv
213.73 251.625 213.73 251.227 213.624 250.856 cv
213.57 250.484 213.384 250.109 213.093 249.659 cv
212.829 249.257 212.562 248.889 212.29 248.565 cv
212.986 247.741 li
219.21 252.958 li
218.544 253.755 li
218.144 253.541 217.695 253.277 217.191 253.09 cv
216.71 252.878 216.284 252.77 215.964 252.744 cv
215.486 252.744 215.058 252.847 214.74 253.09 cv
214.37 253.277 214.027 253.647 213.624 254.181 cv
212.079 255.936 li
216.923 259.928 li
217.404 260.35 217.773 260.618 218.122 260.778 cv
218.464 260.962 218.786 260.962 219.105 260.937 cv
219.372 260.855 219.716 260.644 220.06 260.35 cv
220.327 260.06 220.753 259.552 221.308 258.917 cv
221.474 258.674 221.767 258.41 222.085 257.958 cv
222.454 257.612 222.72 257.24 222.904 256.92 cv
223.148 256.626 223.308 256.228 223.492 255.858 cv
223.677 255.537 223.732 255.216 223.677 255.005 cv
223.677 254.338 223.413 253.541 222.964 252.504 cv
222.562 251.545 222.214 250.883 221.978 250.457 cv
cp
f
222.591 229.651 mo
221.474 229.042 220.433 228.88 219.421 229.175 cv
218.464 229.465 217.642 230.213 217.03 231.356 cv
215.808 233.563 li
223.677 237.769 li
224.583 236.089 li
225.222 234.919 225.382 233.722 225.064 232.524 cv
224.718 231.303 223.894 230.4 222.591 229.651 cv
239.88 230.292 mo
237.22 235.132 li
234.907 235.346 232.88 235.532 231.179 235.772 cv
229.478 235.931 227.669 236.199 225.806 236.515 cv
224.771 238.38 li
230.544 241.518 li
230.862 241.675 231.154 241.783 231.394 241.811 cv
231.714 241.811 231.98 241.731 232.273 241.491 cv
232.429 241.357 232.618 241.091 232.88 240.748 cv
233.148 240.425 233.361 240.081 233.495 239.788 cv
234.427 240.294 li
230.224 248.035 li
229.318 247.532 li
229.425 247.318 229.532 246.999 229.716 246.571 cv
229.903 246.173 229.956 245.908 229.982 245.722 cv
230.011 245.402 229.956 245.16 229.794 244.893 cv
229.638 244.657 229.398 244.47 229.107 244.259 cv
215.857 237.076 li
215.591 236.969 215.273 236.862 215.005 236.809 cv
214.714 236.755 214.423 236.862 214.153 237.076 cv
213.943 237.289 213.73 237.556 213.489 237.847 cv
213.226 238.14 212.986 238.404 212.876 238.646 cv
211.946 238.191 li
216.548 229.708 li
216.974 228.934 217.404 228.217 217.935 227.712 cv
218.464 227.1 219.052 226.621 219.716 226.224 cv
220.327 225.875 221.019 225.717 221.767 225.691 cv
222.454 225.691 223.228 225.847 223.995 226.301 cv
224.718 226.702 225.277 227.154 225.695 227.658 cv
226.128 228.137 226.419 228.695 226.603 229.36 cv
226.767 229.946 226.818 230.586 226.818 231.276 cv
226.767 231.913 226.655 232.661 226.501 233.404 cv
228.202 233.164 229.638 232.951 230.755 232.821 cv
231.872 232.661 233.253 232.446 234.907 232.234 cv
235.622 232.128 236.21 231.996 236.581 231.861 cv
237.03 231.647 237.353 231.49 237.673 231.25 cv
237.939 231.06 238.15 230.823 238.419 230.533 cv
238.653 230.236 238.814 229.972 238.948 229.786 cv
cp
f
234.534 212.549 mo
235.118 212.231 235.702 212.071 236.315 212.018 cv
236.952 211.964 237.62 212.018 238.361 212.231 cv
240.173 212.656 241.448 213.695 242.249 215.316 cv
243.044 216.939 243.204 218.694 242.698 220.664 cv
242.46 221.513 242.089 222.419 241.604 223.242 cv
241.075 224.122 240.544 224.736 239.956 225.291 cv
240.839 226.169 li
240.544 227.338 li
233.63 225.718 li
233.948 224.572 li
234.852 224.572 235.647 224.467 236.446 224.307 cv
237.22 224.202 237.938 223.961 238.682 223.616 cv
239.376 223.242 239.956 222.763 240.464 222.233 cv
240.971 221.648 241.313 220.955 241.555 220.051 cv
241.712 219.41 241.798 218.774 241.741 218.294 cv
241.712 217.737 241.555 217.311 241.313 216.939 cv
241.075 216.51 240.759 216.195 240.438 215.926 cv
240.014 215.689 239.536 215.476 239.005 215.316 cv
238.202 215.155 237.378 215.155 236.581 215.419 cv
235.753 215.716 235.065 216.273 234.481 217.072 cv
234.052 217.63 233.602 218.241 233.097 218.987 cv
232.618 219.652 232.139 220.315 231.714 220.848 cv
230.917 221.833 230.038 222.496 229.027 222.923 cv
228.04 223.35 226.872 223.374 225.569 223.053 cv
224.796 222.847 224.132 222.472 223.52 221.992 cv
222.964 221.488 222.483 220.955 222.134 220.208 cv
221.766 219.544 221.552 218.774 221.473 218.004 cv
221.393 217.151 221.443 216.353 221.659 215.527 cv
221.923 214.622 222.241 213.802 222.72 213.162 cv
223.198 212.497 223.677 211.91 224.266 211.457 cv
223.413 210.577 li
223.677 209.41 li
230.411 211.057 li
230.118 212.231 li
229.317 212.231 228.522 212.256 227.749 212.335 cv
226.977 212.415 226.288 212.575 225.589 212.842 cv
224.929 213.109 224.399 213.505 223.893 214.014 cv
223.413 214.52 223.095 215.155 222.827 216.006 cv
222.61 216.939 222.72 217.791 223.095 218.534 cv
223.52 219.305 224.157 219.812 224.956 220.051 cv
225.833 220.291 226.602 220.238 227.296 219.995 cv
227.986 219.758 228.6 219.254 229.159 218.615 cv
229.661 218.004 230.118 217.391 230.544 216.779 cv
230.966 216.166 231.393 215.61 231.821 215.05 cv
232.192 214.571 232.618 214.065 233.069 213.636 cv
233.522 213.215 233.999 212.813 234.534 212.549 cv
f
246.876 198.77 mo
245.601 208.029 li
244.562 207.892 li
244.591 207.574 244.614 207.23 244.642 206.724 cv
244.692 206.217 244.669 205.898 244.614 205.632 cv
244.536 205.339 244.378 205.074 244.188 204.884 cv
244.003 204.701 243.685 204.595 243.31 204.541 cv
228.384 202.546 li
228.04 202.519 227.776 202.546 227.538 202.546 cv
227.296 202.652 227.028 202.866 226.847 203.263 cv
226.71 203.529 226.526 203.849 226.392 204.3 cv
226.235 204.701 226.075 205.074 226.022 205.367 cv
225.009 205.234 li
226.288 195.975 li
227.296 196.109 li
227.272 196.375 227.272 196.747 227.272 197.173 cv
227.272 197.624 227.296 197.971 227.353 198.314 cv
227.433 198.663 227.587 198.927 227.829 199.115 cv
228.067 199.273 228.362 199.38 228.677 199.38 cv
243.577 201.456 li
243.897 201.509 244.161 201.456 244.427 201.375 cv
244.722 201.271 244.964 201.028 245.122 200.685 cv
245.228 200.525 245.386 200.205 245.519 199.779 cv
245.706 199.327 245.784 198.927 245.837 198.609 cv
cp
f
233.681 174.136 mo
233.63 175.119 li
233.253 175.202 232.833 175.36 232.376 175.573 cv
231.872 175.787 231.394 176.028 230.966 176.264 cv
230.544 176.558 230.118 176.85 229.794 177.221 cv
229.425 177.54 229.216 177.861 229.16 178.207 cv
229.107 178.499 229.054 178.873 229.001 179.323 cv
229.001 179.776 228.949 180.226 228.949 180.6 cv
228.892 181.477 li
245.519 182.063 li
245.837 182.063 246.132 182.037 246.398 181.904 cv
246.718 181.799 246.876 181.53 247.033 181.21 cv
247.14 181.055 247.249 180.705 247.408 180.12 cv
247.513 179.566 247.593 179.164 247.62 178.845 cv
248.66 178.873 li
248.259 188.687 li
247.249 188.636 li
247.249 188.394 247.193 187.916 247.167 187.383 cv
247.14 186.798 247.087 186.451 246.98 186.214 cv
246.876 185.921 246.718 185.626 246.478 185.471 cv
246.24 185.309 245.915 185.228 245.519 185.201 cv
228.785 184.564 li
228.736 185.442 li
228.736 186.559 li
228.736 186.983 228.736 187.438 228.785 187.81 cv
228.814 188.157 229.001 188.501 229.318 188.873 cv
229.638 189.219 230.038 189.564 230.46 189.857 cv
230.862 190.151 231.341 190.467 231.822 190.708 cv
232.3 190.948 232.726 191.107 233.046 191.188 cv
232.99 192.225 li
227.353 192.014 li
228.04 173.896 li
cp
f
229.37 151.444 mo
229.397 151.575 229.477 151.868 229.532 152.245 cv
229.69 152.588 229.794 152.881 229.903 153.014 cv
230.118 153.412 230.302 153.651 230.411 153.812 cv
230.544 153.945 230.888 154.212 231.393 154.583 cv
232.483 155.409 233.55 156.101 234.641 156.79 cv
235.729 157.429 237.136 158.228 238.788 159.238 cv
239.429 159.634 239.931 159.904 240.308 159.985 cv
240.704 160.171 241.236 160.221 241.954 160.221 cv
245.915 160.275 li
246.268 160.275 246.611 160.221 246.876 160.062 cv
247.087 159.928 247.3 159.694 247.464 159.398 cv
247.57 159.161 247.673 158.789 247.778 158.281 cv
247.886 157.747 247.964 157.376 247.993 157.033 cv
249.059 157.033 li
248.847 166.765 li
247.835 166.712 li
247.835 166.45 247.778 166.076 247.727 165.515 cv
247.7 164.987 247.62 164.611 247.542 164.374 cv
247.407 163.998 247.192 163.787 246.979 163.631 cv
246.718 163.469 246.397 163.414 246.026 163.414 cv
240.972 163.363 li
240.809 163.307 240.544 163.414 240.116 163.601 cv
239.692 163.787 239.216 163.973 238.733 164.239 cv
237.565 164.824 236.315 165.464 235.013 166.128 cv
233.681 166.822 232.536 167.435 231.579 167.965 cv
231.02 168.23 230.597 168.496 230.302 168.815 cv
230.011 169.029 229.794 169.294 229.532 169.613 cv
229.397 169.853 229.265 170.144 229.216 170.463 cv
229.106 170.784 229.054 171.076 229.027 171.316 cv
228.013 171.316 li
228.147 162.43 li
229.216 162.43 li
229.216 163.44 229.265 164.164 229.37 164.611 cv
229.477 164.987 229.638 165.198 229.85 165.224 cv
229.903 165.224 230.011 165.198 230.118 165.144 cv
230.274 165.093 230.491 164.987 230.704 164.904 cv
230.966 164.77 231.286 164.611 231.579 164.453 cv
231.927 164.292 232.245 164.134 232.536 163.947 cv
233.419 163.497 234.319 163.07 235.169 162.59 cv
236.026 162.165 237.165 161.525 238.575 160.784 cv
236.128 159.238 234.237 158.014 232.833 157.192 cv
231.499 156.366 230.675 155.966 230.411 155.966 cv
230.169 155.966 229.981 156.019 229.85 156.208 cv
229.716 156.313 229.638 156.552 229.532 156.817 cv
229.425 157.111 229.37 157.404 229.347 157.747 cv
229.317 158.07 229.317 158.414 229.265 158.681 cv
228.202 158.681 li
228.362 151.444 li
cp
f
126.235 237.289 mo
125.466 237.289 124.826 237.607 124.245 238.245 cv
123.652 238.857 123.389 239.682 123.389 240.692 cv
123.389 241.572 123.652 242.316 124.192 242.874 cv
124.719 243.436 125.415 243.699 126.209 243.699 cv
127.007 243.699 127.646 243.436 128.179 242.874 cv
128.712 242.316 128.95 241.518 128.95 240.535 cv
128.95 239.548 128.712 238.778 128.12 238.191 cv
127.646 237.607 126.983 237.289 126.235 237.289 cv
f
139.352 237.289 mo
138.606 237.289 137.965 237.607 137.463 238.324 cv
136.904 239.151 136.579 240.748 136.579 243.086 cv
136.579 245.402 136.852 246.892 137.385 247.662 cv
137.965 248.461 138.606 248.836 139.402 248.836 cv
140.151 248.836 140.84 248.461 141.399 247.662 cv
141.93 246.892 142.223 245.402 142.223 243.086 cv
142.223 240.748 141.93 239.23 141.399 238.46 cv
140.84 237.711 140.151 237.289 139.352 237.289 cv
f
142.839 210.792 mo
143.288 214.52 li
127.17 214.52 li
127.646 210.792 li
77.1029 210.792 li
83.4089 203.053 li
88.7549 202.759 99.0739 201.402 107.91 198.104 cv
125.092 191.665 135.522 200.498 135.522 200.498 cv
143.739 193.608 154.064 195.042 163.614 198.558 cv
172.603 201.855 186.359 202.866 186.359 202.866 cv
192.286 210.792 li
cp
157.064 250.006 mo
147.759 250.006 li
147.759 249.605 147.812 249.152 147.972 248.836 cv
148.212 248.195 148.607 247.532 149.14 246.945 cv
149.646 246.307 150.394 245.641 151.378 244.791 cv
152.89 243.514 153.927 242.583 154.485 241.812 cv
155.019 241.092 155.314 240.426 155.314 239.738 cv
155.314 239.068 155.048 238.487 154.544 238.036 cv
154.064 237.557 153.425 237.289 152.624 237.289 cv
151.8 237.289 151.134 237.557 150.628 238.062 cv
150.151 238.567 149.888 239.258 149.888 240.107 cv
148.077 239.951 li
148.235 238.646 148.663 237.607 149.458 236.916 cv
150.259 236.199 151.319 235.905 152.683 235.905 cv
154.034 235.905 155.101 236.251 155.87 236.997 cv
156.665 237.77 157.064 238.697 157.064 239.788 cv
157.064 240.321 156.962 240.935 156.72 241.465 cv
156.484 241.996 156.085 242.583 155.575 243.193 cv
155.048 243.779 154.14 244.577 152.89 245.641 cv
151.859 246.494 151.191 247.129 150.898 247.398 cv
150.628 247.741 150.368 248.035 150.181 248.381 cv
157.064 248.381 li
cp
143.476 247.053 mo
143.13 248.063 142.65 248.89 141.96 249.393 cv
141.294 249.951 140.415 250.244 139.402 250.244 cv
138.05 250.244 136.958 249.765 136.189 248.782 cv
135.256 247.639 134.776 245.723 134.776 243.086 cv
134.776 241.383 134.987 240.057 135.305 239.068 cv
135.657 238.036 136.16 237.263 136.853 236.756 cv
137.515 236.146 138.392 235.905 139.402 235.905 cv
140.151 235.905 140.816 236.039 141.4 236.33 cv
141.96 236.596 142.441 237.076 142.81 237.635 cv
143.185 238.245 143.448 238.91 143.661 239.738 cv
143.872 240.559 143.98 241.676 143.98 243.086 cv
143.98 244.711 143.794 246.066 143.476 247.053 cv
130.308 246.972 mo
129.884 248.035 129.297 248.859 128.552 249.393 cv
127.752 249.951 126.847 250.244 125.839 250.244 cv
124.719 250.244 123.818 249.951 123.125 249.311 cv
122.437 248.729 122.006 247.875 121.851 246.731 cv
123.497 246.571 li
123.652 247.371 123.949 247.952 124.349 248.302 cv
124.719 248.701 125.253 248.836 125.862 248.836 cv
126.367 248.836 126.847 248.701 127.274 248.461 cv
127.646 248.222 127.966 247.904 128.228 247.479 cv
128.5 247.053 128.713 246.521 128.872 245.853 cv
129.058 245.16 129.136 244.471 129.136 243.727 cv
129.136 243.329 li
128.791 243.939 128.339 244.39 127.7 244.711 cv
127.116 245.057 126.448 245.243 125.786 245.243 cv
124.612 245.243 123.632 244.791 122.834 243.964 cv
122.006 243.086 121.58 241.996 121.58 240.614 cv
121.58 239.23 122.006 238.062 122.859 237.183 cv
123.713 236.33 124.773 235.905 125.994 235.905 cv
126.954 235.905 127.752 236.146 128.552 236.596 cv
129.297 237.076 129.884 237.794 130.308 238.754 cv
130.626 239.657 130.867 240.935 130.867 242.689 cv
130.867 244.471 130.626 245.908 130.308 246.972 cv
114.931 250.006 mo
113.203 250.006 li
113.203 239.018 li
112.776 239.471 112.216 239.788 111.526 240.135 cv
110.891 240.585 110.304 240.881 109.744 241.092 cv
109.744 239.471 li
110.726 238.967 111.526 238.404 112.273 237.77 cv
113.013 237.076 113.517 236.488 113.814 235.905 cv
114.931 235.905 li
cp
89.2609 194.618 mo
100.543 188.767 111.844 182.33 120.674 173.817 cv
114.823 175.254 110.142 175.413 105.302 175.359 cv
106.1 174.082 107.427 173.284 108.494 172.248 cv
115.941 165.277 124.294 158.628 128.339 148.065 cv
125.602 148.996 122.166 149.77 118.467 149.77 cv
125.73 140.457 131.452 129.527 134.485 116.037 cv
134.91 116.037 li
137.89 129.579 143.716 140.379 150.948 149.77 cv
147.704 149.555 144.989 149.423 141.243 147.963 cv
141.4 149.529 142.224 151.018 142.921 152.375 cv
146.507 158.972 152.278 164.21 157.655 169.294 cv
159.835 171.316 162.177 173.101 164.093 175.359 cv
158.134 175.893 155.417 175.413 148.878 173.682 cv
151.003 176.21 153.798 178.073 156.376 180.12 cv
163.402 185.867 171.802 190.15 180.261 194.618 cv
180.929 194.966 181.968 195.202 182.232 196.083 cv
175.214 197.068 167.413 196.535 159.835 194.112 cv
150.577 190.923 141.8 190.734 135.305 196.8 cv
128.073 190.974 120.917 190.894 109.345 193.952 cv
102.748 196.003 94.1279 196.934 87.1839 196.083 cv
87.4269 195.125 88.5399 194.992 89.2609 194.618 cv
217.239 100.369 mo
51.1949 100.369 li
50.9819 100.396 51.0349 100.66 50.9279 100.823 cv
50.7669 122.157 51.0089 144.131 50.9279 164.904 cv
50.7669 185.947 53.8249 204.968 60.6649 219.941 cv
67.3679 234.762 78.3819 245.428 90.8819 254.391 cv
103.601 263.413 119.507 268.251 134.191 275.835 cv
148.82 268.2 164.677 263.439 177.339 254.205 cv
189.841 245.16 201.148 234.789 207.773 219.812 cv
214.37 204.781 217.345 186.268 217.345 164.611 cv
217.345 143.703 217.507 121.52 217.239 100.369 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
